CONCOURSE AS A CASE STUDY

	Concourse has quite a few number of images to build:
	
	- concourse/concourse
	- concourse/*-resource (13 of them)

	This means that there's a lot of source code to be scanned by the OSLO
	team to ensure that we're not shipping licenses that hurt our customers.



BILL OF MATERIALS

	Describes versions and where copyright + licensing information can be
	retrieved from if source code needs to be analyzed.

	bom.yml

		bin/concourse:
		  type: git
		  version: $sha
		  source: https://github.com/concourse/concourse
		bin/gdn:
		  type: git
		  version: $tag
		  source: https://github.com/cloudfoundry/garden-runc-release
		resource-types/bosh-io-release/*:
		  type: git
		  version: $tag
		  source: https://github.com/concourse/bosh-io-release-resource
		...
		
	
	It's intended to cover all of the files that a given directory or
	tarball contains.



BUILD PROCESS DISCOVERY

	`estaleiro` adds metadata to the container image in order to allow
	others to:

	- verify that the `ruleset` makes sense
	- give continuity from other images that have been built in steps before
	



IMAGE BULDING SAMPLES

	concourse/concourse

		This is a very particular case where it's very hard to get
		visibility right:

		- `linux-rc/*` brings the result of multiple build steps in a
		  pipeline that generate several binaries that are put together
		  in the form of a final `rc`, being made of:


			.
			├── bin
			│   ├── concourse
			│   └── gdn
			├── fly-assets
			│   ├── fly-darwin-amd64.tgz
			│   ├── fly-linux-amd64.tgz
			│   └── fly-windows-amd64.zip
			└── resource-types
			    ├── bosh-io-release
			    │   ├── resource_metadata.json
			    │   └── rootfs.tgz
			    ...
			    └── tracker
				├── resource_metadata.json
				└── rootfs.tgz


		What the build process of `concourse/concourse` does then is to
		just extract all of that at a particular container image
		location, and then add some packages that are necessary for
		Concourse to have at runtime.

		With `estaleiro` being given a ruleset that forces builds to
		have Bill of Materials files, this means that we can't just
		drop that tarball into the container image without saying where
		the contents of that tarball comes from.
	

		SAMPLE


			base_image:
			  name: library/ubuntu
			  ref: bionic

			files:
			  - from: { local: ./linux-rc/*.tgz }
			    to: /usr/local
			    bom: { file: ./linux-rc/bom.yml }

			env:
			  - CONCOURSE_SESSION_SIGNING_KEY /concourse-keys/session_signing_key
			  ...

			packages:
			  - btrfs-tools
			  - ca-certificates
			  - dumb-init
			  - iproute2
			  - file

			stopsignal:
			  - SIGUSR2

			entrypoint:
			  - /usr/local/concourse/bin/concourse




		OUTPUT:

			- container image
				OCI image somewhere in the filesystem


			- full bill of materials

				```
				base_image:
				  name: <>
				  tag: <>?
				  digest: <>

				packages:
				  - name: <this>
				    version: <that>
				    repository: <>

				files:
				  - name: /usr/local/bin/concourse
				    version: blabla
				    ...

				user: 1001

				```


	concourse/git-resource

		base_image:
		  name: library/ubuntu
		  ref: bionic

		apt_repos:
		  - deb http://http.debian.net/debian wheezy-backports main

		packages:
		  - curl
		  - git
		  - gnupg
		  - gzip
		  - jq
		  - openssl
		  - libssl-dev:q
		  - make
		  - g++
		  - openssl-client
		  - libstdc++6
		  - git-lfs

		files:
		  - from:
		      step: build-proxy-tunnel
		      at: /usr/bin/proxytunnel
		    dst: /usr/bin/proxytunnel
		    mode: 0755
		    source_code: <>
		    version?

		without_files:
		  - /usr/libexec/git-core/git-add
		  - /usr/libexec/git-core/git-add--interactive
		  - /usr/libexec/git-core/git-annotate
		  ...
	
		links:
		  - from: <>
		    to: <>



	concourse/docker-image-resource
		
		APT_INST
		ADD_APT_REPO








COMMANDS

	COPY
		description:
			Provides the ability to retrieve blobs, either from
			other container images, or the file system.

			Being the only way to add files that are not coming from
			a package manager, 


		rule_set:
			- `bom` must be provided

	BASE_IMAGE

		rule_set:
			- name must match a whitelist
			- digest must be specified
			- blacklist of tags
			- whitelist of tags


	APT_INST

		rule_set:
			- version must be specified
			- source must exist

		args:
			[ package name ]

		example:
			apt_inst:
			  - dnsutils
			  - gcc


	APT_ADD_REPO

		rule_set:
			- must have `deb src` available
			

	STOPSIGNAL

		rule_set:
			[]

