PACKAGES WITHOUT SRC


	There are some cases where repositories simply don't have a source
	counterpart that is able to give us the source code for the contents
	that are being packaged.


	Currently, `estaleiro` just errors if it detects that there are certain
	packages whose repositories can't be found.


	For instance:

		
		image "concourse/docker-image-resource" {
		  base_image = "ubuntu:bionic"

		  apt {
		    repositories = [ "deb https://download.docker.com/linux/ubuntu bionic stable" ]

		    key "docker" {
		      uri = "https://download.docker.com/linux/ubuntu/gpg"
		    }

		    package "docker-ce" { }
		  }
		}


	To solve that, we could let the user know what the problem is

		- couldn't find `src` for `package=version`


	And tell the user how to solve it
		
		- fix `apt.repositories`, or
		- manually include source info

		
			package "docker-ce" {
				version = "docker-ce_19.03.1~3-0~ubuntu-bionic_amd64.deb"

				vcs "git" {
					repository = "https://github.com/docker/docker-ce"
					ref        = "19.03.1"
				}
			}

			package "containerd.io" {
				version = "something..."

				vcs "git" {
					repository = "https://github.com/containerd/containerd"
					ref        = "19.03.1"
				}
			}
	

	with those hardcoded source infos, we should be able to skip the source
	fetching for such.

		apt packages \
			-p docker-ce \
			-s containerd.io=$version \
			-s docker-ce-cli=$version \
			-s docker-ce=$version


	this would shortcut the checking process, being similar to how we do
	for file sources, where we fill that info later in the `merge` step.


FINAL BOM

	packages:
	- name: containerd.io
	  version: blabla
	  source_package: docker-ce
	  architecture: amd64
	  location:
	    uri: $debian_package_uri
	    digest: $digest
	    name: name
	  sources:
	    - git:
	        uri: https://github.com/containerd/containerd
	        ref: v1.2.3
	    - external_resource:
	        uri: ...
	        digest: ...
	        name: ...
	



MERGING

	merge(
		PackageSource{
			name: something,
			version: somethingelse,
			source: fille
		},
		Package {
			name something,
			version: somethingelse,
			source: empty
		},
	) ==> final package.

